POST https://graph.microsoft.com/v1.0/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/messages
Content-Type: application/json
Authorization: Bearer {access-token}

{
  "body": {
    "contentType": "html",
    "content": "<h2>Release Notes - Version 1.2.3</h2><p>Here are the latest updates...</p>"
  }
}

Step-by-Step Guide to Post Release Notes to a Teams Shared Channel Using Microsoft Graph APIStep 1: Set Up AuthenticationRegister Your Application in Microsoft Entra ID:Go to the Microsoft Entra admin center (https://entra.microsoft.com).
Navigate to Applications > App registrations and click New registration.
Provide a name (e.g., "TeamsReleaseNotesApp"), select the appropriate account type, and register the app.
Note the Application (client) ID, Directory (tenant) ID, and create a Client Secret under Certificates & secrets.

Configure Authentication:Use the Microsoft Identity platform to obtain an access token.
For this scenario, you’ll typically use delegated permissions (user-based authentication) since application permissions for posting messages to channels are only supported for migration scenarios.

Use an OAuth 2.0 flow (e.g., Authorization Code Flow or Client Credentials Flow for testing in a delegated context). You can use tools like Postman or code libraries (e.g., MSAL for Python or .NET) to acquire the token.
The token endpoint is https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token.

Example (Client Credentials Flow for testing):http

POST https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={your-client-id}
&client_secret={your-client-secret}
&scope=https://graph.microsoft.com/.default

Ensure the access token is included in the API request header as Authorization: Bearer {token}.

Step 2: Identify the Team and Shared ChannelGet the Team ID:Use the List joined teams or List all teams API to find the ID of the team containing the shared channel.
Endpoint: GET https://graph.microsoft.com/v1.0/me/joinedTeams (for the signed-in user) or GET https://graph.microsoft.com/v1.0/teams/{team-id}.
Example Response:json

{
  "value": [
    {
      "id": "fbe2bf47-16c8-47cf-b4a5-4b9b187c508b",
      "displayName": "Sales Department"
    }
  ]
}

Get the Shared Channel ID:Use the List channels API to retrieve the channels in the team, including shared channels.
Endpoint: GET https://graph.microsoft.com/v1.0/teams/{team-id}/channels.
Filter for shared channels by checking the membershipType property, which should be shared.
Example Request:http

GET https://graph.microsoft.com/v1.0/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels

Example Response:json

{
  "value": [
    {
      "id": "19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2",
      "displayName": "Release Notes Channel",
      "membershipType": "shared"
    }
  ]
}

Note the channelId for the shared channel (e.g., 19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2).

Step 3: Verify User Access to the Shared ChannelShared channels in Teams can include members from different teams or even external tenants, so you need to ensure the user or application has access to the shared channel.
Use the Check user access API to verify access:Endpoint: POST https://graph.microsoft.com/beta/teams/{teamId}/channels/{channelId}/checkUserAccess.
Example Request:http

POST https://graph.microsoft.com/beta/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/checkUserAccess
Content-Type: application/json
{
  "[email protected]": "https://graph.microsoft.com/beta/users/{user-id}"
}

This step ensures the user (or service account) can post to the shared channel.

Step 4: Construct the API Request to Post the MessageUse the Send chatMessage API to post the release notes to the shared channel.
Endpoint: POST https://graph.microsoft.com/v1.0/teams/{team-id}/channels/{channel-id}/messages.
Request Body:The message content is specified in the body field, with contentType set to html or text.
You can include attachments (e.g., a release notes document) by uploading the file to SharePoint first and referencing it in the attachments field.

Example Request (Simple Text Message):http

POST https://graph.microsoft.com/v1.0/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/messages
Content-Type: application/json
Authorization: Bearer {access-token}

{
  "body": {
    "contentType": "html",
    "content": "<h2>Release Notes - Version 1.2.3</h2><p>Here are the latest updates...</p>"
  }
}

Example Response:json

{
  "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#teams('fbe2bf47-16c8-47cf-b4a5-4b9b187c508b')/channels('19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2')/messages/$entity",
  "id": "1616990032035",
  "body": {
    "contentType": "html",
    "content": "<h2>Release Notes - Version 1.2.3</h2><p>Here are the latest updates...</p>"
  },
  "channelIdentity": {
    "teamId": "fbe2bf47-16c8-47cf-b4a5-4b9b187c508b",
    "channelId": "19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2"
  }
}

Optional: Posting with an Attachment:Upload the release notes file (e.g., a PDF or DOCX) to the team’s SharePoint site using the Drive API.
Endpoint: PUT https://graph.microsoft.com/v1.0/teams/{team-id}/channels/{channel-id}/filesFolder/driveItem:/{filename}:/content.
Get the webUrl and eTag of the uploaded file to use in the message.
Example Request with Attachment:http

POST https://graph.microsoft.com/v1.0/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/messages
Content-Type: application/json
Authorization: Bearer {access-token}

{
  "body": {
    "contentType": "html",
    "content": "Here's the latest release notes. <attachment id=\"153fa47d-18c9-4179-be08-9879815a9f90\"></attachment>"
  },
  "attachments": [
    {
      "id": "153fa47d-18c9-4179-be08-9879815a9f90",
      "contentType": "reference",
      "contentUrl": "https://m365x987948.sharepoint.com/sites/test/Shared Documents/General/ReleaseNotes.docx",
      "name": "ReleaseNotes.docx"
    }
  ]
}

Note: The attachment ID must match the eTag of the uploaded file, and the contentUrl must be the webUrl from the SharePoint drive item.

Step 5: Required RBAC PermissionsMicrosoft Graph API Permissions:To post messages to a shared channel, you need the following delegated permissions:ChannelMessage.Send (least privileged) – Allows the app to send channel messages in Microsoft Teams on behalf of the signed-in user.

Group.ReadWrite.All (optional, for backward compatibility) – Allows broader access to groups and teams but is not recommended for new applications.

If uploading files to SharePoint:Files.ReadWrite.All – To upload and manage files in the team’s SharePoint site.

To check user access to the shared channel (beta endpoint):ChannelMember.Read.All or ChannelMember.ReadWrite.All – To verify membership in the shared channel.

To list teams and channels:Team.ReadBasic.All or Channel.ReadBasic.All – To retrieve team and channel information.

Grant Permissions:In the Microsoft Entra admin center, navigate to your app registration, go to API permissions, and add the required Microsoft Graph permissions.
Ensure an admin grants consent for these permissions (Admin consent required for application permissions or certain delegated permissions).

RBAC in Microsoft Teams:The user or service account posting the message must be a member of the shared channel or have appropriate access (e.g., as an owner or member of the team or a shared channel member from another tenant).

To add a user to a shared channel (if needed):Endpoint: POST https://graph.microsoft.com/beta/teams/{teamId}/channels/{channelId}/members.
Example:http

POST https://graph.microsoft.com/beta/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/members
Content-Type: application/json
{
  "@odata.type": "#microsoft.graph.aadUserConversationMember",
  "roles": [],
  "[email protected]": "https://graph.microsoft.com/beta/users/{user-id}"
}

For external users, include the tenantId in the request body.

Use Azure RBAC roles or Administrative Units to scope permissions if needed:Create a custom RBAC role with permissions like microsoft.directory/groups.security/members/update and assign it to an Administrative Unit to limit the app’s access to specific teams or channels.

Step 6: Test the API RequestUse a tool like Postman or a programming language (e.g., Python, C#) with the Microsoft Graph SDK to test the request.
Example in Python (using msal and requests):python

import msal
import requests

# Authentication
client_id = "{your-client-id}"
client_secret = "{your-client-secret}"
tenant_id = "{your-tenant-id}"
authority = f"https://login.microsoftonline.com/{tenant_id}"
scope = ["https://graph.microsoft.com/.default"]

app = msal.ConfidentialClientApplication(client_id, authority=authority, client_credential=client_secret)
token = app.acquire_token_for_client(scopes=scope)

headers = {
    "Authorization": f"Bearer {token['access_token']}",
    "Content-Type": "application/json"
}

# Post message
url = "https://graph.microsoft.com/v1.0/teams/fbe2bf47-16c8-47cf-b4a5-4b9b187c508b/channels/19:4a95f7d8db4c4e7fae857bcebe0623e6@thread.tacv2/messages"
payload = {
    "body": {
        "contentType": "html",
        "content": "<h2>Release Notes - Version 1.2.3</h2><p>Here are the latest updates...</p>"
    }
}

response = requests.post(url, headers=headers, json=payload)
print(response.json())

Step 7: Handle Errors and Known IssuesCommon Errors:Unauthorized (401): Ensure the access token is valid and includes the required permissions. Verify the user has access to the shared channel.

Bad Request (400): Check the request body format, especially for attachments or invalid channel IDs.
Forbidden (403): The user or app may not have permission to post to the shared channel. Use the checkUserAccess API to confirm access.

Known Issues with Shared Channels:Creating a shared channel returns a 202 Accepted response with a teamsAsyncOperation link, as provisioning may take longer. Monitor the operation status if creating a new shared channel.

The SharePoint site for a shared channel may fail to provision immediately. Use the Get filesFolder API to trigger provisioning if needed.

Throttling Limits: Be aware of Microsoft Teams API throttling limits, which may restrict frequent polling or posting.

Step 8: Validate the PostVerify the message appears in the shared channel in Microsoft Teams.
If an attachment was included, ensure the link is accessible to channel members.
Optionally, use the List channel messages API to confirm the message was posted:Endpoint: GET https://graph.microsoft.com/v1.0/teams/{team-id}/channels/{channel-id}/messages.

Required RBAC SummaryMicrosoft Graph Permissions:Delegated Permissions (preferred for posting messages):ChannelMessage.Send (least privileged for sending messages).
Files.ReadWrite.All (if uploading attachments to SharePoint).
ChannelMember.Read.All or ChannelMember.ReadWrite.All (to check or manage shared channel membership).
Team.ReadBasic.All or Channel.ReadBasic.All (to list teams and channels).

Application Permissions (only for migration scenarios):Teamwork.Migrate.All (not applicable for standard posting).

Teams RBAC:The user or service account must be a member of the shared channel or have owner permissions in the team.
For external users, ensure the correct tenantId is specified when adding them to the shared channel.

Azure RBAC (Optional):Use Administrative Units with custom roles (e.g., microsoft.directory/groups.security/members/update) to scope the app’s access to specific teams or channels.

Additional NotesFormatting Release Notes: Use HTML in the content field to format the release notes with headings, lists, or links for better readability.
Security Best Practices: Request only the least privileged permissions needed. Avoid using broad permissions like Group.ReadWrite.All unless necessary.

Shared Channel Considerations: Shared channels may include external users, so ensure the release notes content is appropriate for the audience. Verify external user access if needed.

Testing Environment: Use the Microsoft Graph Explorer (https://developer.microsoft.com/graph/graph-explorer) to test API calls with a user account that has access to the shared channel.

