try {
    # Get input variables
    $shortcutsFileName = $env:SHORTCUTS_FILE_NAME
    $lakehouseName = $env:LAKEHOUSE_NAME

    Write-Host "##[debug]Processing shortcuts file: $shortcutsFileName with lakehouse: $lakehouseName"

    # Validate input variables
    if (-not $shortcutsFileName) {
        Write-Error "SHORTCUTS_FILE_NAME environment variable is not set"
        exit 1
    }
    if (-not $lakehouseName) {
        Write-Error "LAKEHOUSE_NAME environment variable is not set"
        exit 1
    }

    # Read and parse the shortcuts JSON file
    if (-not (Test-Path $shortcutsFileName)) {
        Write-Error "Shortcuts file not found: $shortcutsFileName"
        exit 1
    }

    $shortcutsJson = Get-Content $shortcutsFileName -Raw | ConvertFrom-Json

    # Initialize array for detailed shortcuts
    $detailedShortcuts = @()

    # Process each shortcut entry
    foreach ($shortcut in $shortcutsJson) {
        if ($shortcut.name -and $shortcut.target.oneLake.workspaceId) {
            $detailedShortcuts += [PSCustomObject]@{
                name = $shortcut.name
                lakehouse = $lakehouseName
                workspace = $shortcut.target.oneLake.workspaceId
            }
            Write-Host "##[debug]Added shortcut: $($shortcut.name) (Lakehouse: $lakehouseName, Workspace: $($shortcut.target.oneLake.workspaceId))"
        } else {
            Write-Host "##[warning]Skipping invalid shortcut entry. Name or workspaceId missing: $($shortcut.name)"
        }
    }

    # Check if any valid shortcuts were found
    if ($detailedShortcuts.Count -eq 0) {
        Write-Host "##[warning]No valid shortcuts found in $shortcutsFileName"
        exit 0
    }

    Write-Host "##[debug]Processed $($detailedShortcuts.Count) valid shortcut definitions"

    # Convert to JSON
    $detailedShortcutsJson = $detailedShortcuts | ConvertTo-Json -Depth 5 -Compress

    # Ensure JSON is an array
    if ($detailedShortcuts.Count -eq 1) {
        $detailedShortcutsJson = "[$detailedShortcutsJson]"
    }

    # Log the JSON for debugging
    Write-Host "##[debug]Detailed Shortcuts JSON: $detailedShortcutsJson"

    # Set as pipeline variable
    Write-Host "##vso[task.setvariable variable=FABRIC_SHORTCUTS_DETAILED]$detailedShortcutsJson"
} catch {
    Write-Error "Error processing shortcuts: $_"
    Write-Error $_.ScriptStackTrace
    exit 1
}
