# Step 7: Create and seed dim_policy_status table
try:
    logger.info(f"Creating and seeding {schema_name}.dim_policy_status table")
    # Define the dim_policy_status table DDL
    dim_policy_status_ddl = f"""
    CREATE TABLE IF NOT EXISTS {schema_name}.dim_policy_status (
        policy_status_key INT,
        policy_status_level STRING,
        policy_status_cd_bus_key STRING,
        policy_status_desc STRING,
        policy_status_parent_cd_bus_key STRING,
        policy_status_parent_key INT,
        dl_eltid STRING,
        dl_runid STRING,
        dl_row_insert_agent STRING,
        dl_row_hash STRING,
        dl_is_current_flag TINYINT,
        dl_row_expiration_date DATE,
        dl_row_effective_date DATE,
        dl_row_update_timestamp TIMESTAMP,
        dl_row_insert_timestamp TIMESTAMP,
        dl_is_deleted_flag TINYINT
    ) USING DELTA COMMENT 'Dimension table for policy statuses, capturing hierarchy and descriptions';
    """
    spark.sql(dim_policy_status_ddl)
    logger.info(f"Table {schema_name}.dim_policy_status created successfully")

    # Insert default rows into dim_policy_status
    default_policy_status_query = f"""
    INSERT INTO {schema_name}.dim_policy_status
    SELECT
        -1 AS policy_status_key,
        'unknown' AS policy_status_level,
        'unknown' AS policy_status_cd_bus_key,
        'unknown' AS policy_status_desc,
        'unknown' AS policy_status_parent_cd_bus_key,
        -1 AS policy_status_parent_key,
        'unknown' AS dl_eltid,
        'unknown' AS dl_runid,
        'unknown' AS dl_row_insert_agent,
        'unknown' AS dl_row_hash,
        -1 AS dl_is_current_flag,
        NULL AS dl_row_expiration_date,
        NULL AS dl_row_effective_date,
        NULL AS dl_row_update_timestamp,
        NULL AS dl_row_insert_timestamp,
        -1 AS dl_is_deleted_flag
    UNION ALL
    SELECT
        -2 AS policy_status_key,
        'not applicable' AS policy_status_level,
        'not applicable' AS policy_status_cd_bus_key,
        'not applicable' AS policy_status_desc,
        'not applicable' AS policy_status_parent_cd_bus_key,
        -2 AS policy_status_parent_key,
        'not applicable' AS dl_eltid,
        'not applicable' AS dl_runid,
        'not applicable' AS dl_row_insert_agent,
        'not applicable' AS dl_row_hash,
        -2 AS dl_is_current_flag,
        NULL AS dl_row_expiration_date,
        NULL AS dl_row_effective_date,
        NULL AS dl_row_update_timestamp,
        NULL AS dl_row_insert_timestamp,
        -2 AS dl_is_deleted_flag
    """
    spark.sql(default_policy_status_query)
    logger.info(f"Default rows inserted into {schema_name}.dim_policy_status")

    # Seed the dim_policy_status table using UNION ALL
    seed_policy_status_query = f"""
    INSERT INTO {schema_name}.dim_policy_status (
        policy_status_key,
        policy_status_level,
        policy_status_cd_bus_key,
        policy_status_desc,
        policy_status_parent_cd_bus_key,
        dl_is_current_flag,
        dl_row_effective_date,
        dl_row_insert_timestamp,
        dl_is_deleted_flag
    )
    SELECT
        (monotonically_increasing_id() + 1) AS policy_status_key,
        policy_status_level,
        policy_status_cd_bus_key,
        policy_status_desc,
        policy_status_parent_cd_bus_key,
        1 AS dl_is_current_flag,
        current_date() AS dl_row_effective_date,
        current_timestamp() AS dl_row_insert_timestamp,
        0 AS dl_is_deleted_flag
    FROM (
        SELECT 'LW0' AS policy_status_level, 'Re-write' AS policy_status_cd_bus_key, 'Re-write' AS policy_status_desc, NULL AS policy_status_parent_cd_bus_key
        UNION ALL SELECT 'LX0', 'Re-issue', 'Re-issue', NULL
        UNION ALL SELECT 'LN0', 'NB - New Submission', 'NB - New Submission', NULL
        UNION ALL SELECT 'LR0', 'RN - Renewal', 'RN - Renewal', NULL
        UNION ALL SELECT 'LZ0', 'Other - Exception', 'Other - Exception', NULL
        UNION ALL SELECT 'LN1', 'NB - Completed Submission', 'NB - Completed Submission', 'NB - New Submission'
        UNION ALL SELECT 'LN2', 'NB - Open Submission', 'NB - Open Submission', 'NB - New Submission'
        UNION ALL SELECT 'LN3', 'NB - Abandoned Before Prem Est', 'NB - Abandoned Before Prem Est', 'NB - New Submission'
        UNION ALL SELECT 'LN4', 'NB - Other Exception', 'NB - Other Exception', 'NB - New Submission'
        UNION ALL SELECT 'LN1_1', 'NB - Quoted', 'NB - Quoted', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_2', 'NB - Open Completed Submission', 'NB - Open Completed Submission', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_3', 'NB - Guard Declined', 'NB - Guard Declined', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_4', 'NB - Agency Withdrawal', 'NB - Agency Withdrawal', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_1_1', 'NB - Total Written', 'NB - Total Written', 'NB - Quoted'
        UNION ALL SELECT 'LN1_1_2', 'NB - Open Quote', 'NB - Open Quote', 'NB - Quoted'
        UNION ALL SELECT 'LN1_1_3', 'NB - Quote Not Taken', 'NB - Quote Not Taken', 'NB - Quoted'
        UNION ALL SELECT 'LN1_3_1', 'NB - Decline - Book of Record', 'NB - Decline - Book of Record', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_2', 'NB - Decline - Class of Exposure', 'NB - Decline - Class of Exposure', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_3', 'NB - Decline - Questions', 'NB - Decline - Questions', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_4', 'NB - Decline - UW', 'NB - Decline - UW', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_4_1', 'NB - After Initial Prem Estimate Quote Not Taken', 'NB - After Initial Prem Estimate Quote Not Taken', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_4_2', 'NB - Not Responding to UW', 'NB - Not Responding to UW', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_4_3', 'NB - Agent Withdraw Before Quote', 'NB - Agent Withdraw Before Quote', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_1_1_1', 'NB - Issued', 'NB - Issued', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_2', 'NB - Canceled Flat', 'NB - Canceled Flat', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_3', 'NB - Canceled Short Rate', 'NB - Canceled Short Rate', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_4', 'NB - Canceled Pro-rata', 'NB - Canceled Pro-rata', 'NB - Total Written'
        UNION ALL SELECT 'LR2_1', 'RN - Quoted', 'RN - Quoted', 'RN - Renewal'
        UNION ALL SELECT 'LR2_2', 'RN - Guard Declined', 'RN - Guard Declined', 'RN - Renewal'
        UNION ALL SELECT 'LR2_3', 'RN - Other Exception', 'RN - Other Exception', 'RN - Renewal'
        UNION ALL SELECT 'LR2_1_1', 'RN - Pending Proposal', 'RN - Pending Proposal', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_2', 'RN - Pending Issuance', 'RN - Pending Issuance', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_3', 'RN - Total Written', 'RN - Total Written', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_4', 'RN - Open Quote', 'RN - Open Quote', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_5', 'RN - Quote Not Taken', 'RN - Quote Not Taken', 'RN - Quoted'
        UNION ALL SELECT 'LR2_2_1', 'RN - Decline - Book of Record', 'RN - Decline - Book of Record', 'RN - Guard Declined'
        UNION ALL SELECT 'LR2_2_2', 'RN - Decline - UW', 'RN - Decline - UW', 'RN - Guard Declined'
        UNION ALL SELECT 'LR2_1_3_1', 'RN - Issued Paid', 'RN - Issued Paid', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_2', 'RN - Issued Not Paid', 'RN - Issued Not Paid', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_3', 'RN - Canceled Short Rate', 'RN - Canceled Short Rate', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_4', 'RN - Canceled Pro-rata', 'RN - Canceled Pro-rata', 'RN - Total Written'
    ) AS data
    """
    spark.sql(seed_policy_status_query)
    logger.info(f"Table {schema_name}.dim_policy_status seeded successfully")

    # Update policy_status_parent_key
    update_parent_key_query = f"""
    MERGE INTO {schema_name}.dim_policy_status AS a
    USING {schema_name}.dim_policy_status AS b
    ON a.policy_status_parent_cd_bus_key = b.policy_status_cd_bus_key
    WHEN MATCHED AND a.policy_status_key > 0 THEN
        UPDATE SET a.policy_status_parent_key = b.policy_status_key
    """
    spark.sql(update_parent_key_query)
    logger.info(f"Updated policy_status_parent_key in {schema_name}.dim_policy_status")
except Exception as e:
    logger.error(f"Error creating, seeding, or updating {schema_name}.dim_policy_status: {str(e)}")
    raise
=================
# Insert default rows into dim_date
    default_rows_query = f"""
    INSERT INTO {schema_name}.dim_date
    SELECT
        -1 AS datekey,
        NULL AS `date`,
        -1 AS `day`,
        'unknown' AS day_suffix,
        'unknown' AS day_name,
        -1 AS day_of_week,
        -1 AS day_of_week_in_month,
        -1 AS day_of_year,
        -1 AS is_weekend,
        -1 AS `week`,
        -1 AS iso_week,
        NULL AS first_of_week,
        NULL AS last_of_week,
        -1 AS week_of_month,
        -1 AS `month`,
        'unknown' AS month_name,
        NULL AS first_of_month,
        NULL AS last_of_month,
        NULL AS first_of_next_month,
        NULL AS last_of_next_month,
        -1 AS `quarter`,
        'unknown' AS year_quarter,
        NULL AS first_of_quarter,
        NULL AS last_of_quarter,
        -1 AS `year`,
        -1 AS iso_year,
        NULL AS first_of_year,
        NULL AS last_of_year,
        -1 AS is_leap_year,
        -1 AS has_53_weeks,
        -1 AS has_53_iso_weeks,
        'unknown' AS mmyyyy,
        'unknown' AS style101,
        'unknown' AS style103,
        'unknown' AS style112,
        'unknown' AS style120,
        -1 AS year_to_date,
        -1 AS prior_year_to_date,
        -1 AS prior_year,
        -1 AS prior_2_years,
        -1 AS trailing_12_months,
        -1 AS prior_month_ytd,
        -1 AS prior_month_pytd,
        -1 AS prior_month_ttm,
        -1 AS inforce_date_ytd,
        -1 AS inforce_date_pytd,
        -1 AS prior_month_py_ttm,
        -1 AS current_quarter,
        -1 AS prior_year_quarter,
        -1 AS prior_trailing_4_quarter
    UNION ALL
    SELECT
        -2 AS datekey,
        NULL AS `date`,
        -2 AS `day`,
        'not applicable' AS day_suffix,
        'not applicable' AS day_name,
        -2 AS day_of_week,
        -2 AS day_of_week_in_month,
        -2 AS day_of_year,
        -2 AS is_weekend,
        -2 AS `week`,
        -2 AS iso_week,
        NULL AS first_of_week,
        NULL AS last_of_week,
        -2 AS week_of_month,
        -2 AS `month`,
        'not applicable' AS month_name,
        NULL AS first_of_month,
        NULL AS last_of_month,
        NULL AS first_of_next_month,
        NULL AS last_of_next_month,
        -2 AS `quarter`,
        'not applicable' AS year_quarter,
        NULL AS first_of_quarter,
        NULL AS last_of_quarter,
        -2 AS `year`,
        -2 AS iso_year,
        NULL AS first_of_year,
        NULL AS last_of_year,
        -2 AS is_leap_year,
        -2 AS has_53_weeks,
        -2 AS has_53_iso_weeks,
        'not applicable' AS mmyyyy,
        'not applicable' AS style101,
        'not applicable' AS style103,
        'not applicable' AS style112,
        'not applicable' AS style120,
        -2 AS year_to_date,
        -2 AS prior_year_to_date,
        -2 AS prior_year,
        -2 AS prior_2_years,
        -2 AS trailing_12_months,
        -2 AS prior_month_ytd,
        -2 AS prior_month_pytd,
        -2 AS prior_month_ttm,
        -2 AS inforce_date_ytd,
        -2 AS inforce_date_pytd,
        -2 AS prior_month_py_ttm,
        -2 AS current_quarter,
        -2 AS prior_year_quarter,
        -2 AS prior_trailing_4_quarter
    """
    spark.sql(default_rows_query)
    logger.info(f"Default rows inserted into {schema_name}.dim_date")
# Step 5: Create and seed dim_date table
try:
    logger.info(f"Creating and seeding {schema_name}.dim_date table")
    # Define the dim_date table DDL
    dim_date_ddl = f"""
    CREATE TABLE IF NOT EXISTS {schema_name}.dim_date (
        datekey INT,
        `date` DATE,
        `day` TINYINT,
        day_suffix STRING,
        day_name STRING,
        day_of_week TINYINT,
        day_of_week_in_month TINYINT,
        day_of_year SMALLINT,
        is_weekend TINYINT,
        `week` TINYINT,
        iso_week TINYINT,
        first_of_week DATE,
        last_of_week DATE,
        week_of_month TINYINT,
        `month` TINYINT,
        month_name STRING,
        first_of_month DATE,
        last_of_month DATE,
        first_of_next_month DATE,
        last_of_next_month DATE,
        `quarter` TINYINT,
        year_quarter STRING,
        first_of_quarter DATE,
        last_of_quarter DATE,
        `year` SMALLINT,
        iso_year SMALLINT,
        first_of_year DATE,
        last_of_year DATE,
        is_leap_year TINYINT,
        has_53_weeks TINYINT,
        has_53_iso_weeks TINYINT,
        mmyyyy STRING,
        style101 STRING,
        style103 STRING,
        style112 STRING,
        style120 STRING,
        year_to_date TINYINT,
        prior_year_to_date TINYINT,
        prior_year TINYINT,
        prior_2_years TINYINT,
        trailing_12_months TINYINT,
        prior_month_ytd TINYINT,
        prior_month_pytd TINYINT,
        prior_month_ttm TINYINT,
        inforce_date_ytd TINYINT,
        inforce_date_pytd TINYINT,
        prior_month_py_ttm TINYINT,
        current_quarter TINYINT,
        prior_year_quarter TINYINT,
        prior_trailing_4_quarter TINYINT
    ) USING DELTA COMMENT 'Dimension table for dates, containing various date-related attributes for analytics';
    """
    spark.sql(dim_date_ddl)
    logger.info(f"Table {schema_name}.dim_date created successfully")

    # Seed the dim_date table with generated data
    seed_query = """
    WITH seq AS (
        SELECT sequence(to_date('2010-01-01'), to_date('2039-12-31'), INTERVAL 1 DAY) AS date_array
    ),
    d AS (
        SELECT explode(date_array) AS d
        FROM seq
    ),
    src AS (
        SELECT
            d AS TheDate,
            dayofmonth(d) AS TheDay,
            date_format(d, 'EEEE') AS TheDayName,
            weekofyear(d) AS TheWeek,
            weekofyear(d) AS TheISOWeek,
            dayofweek(d) AS TheDayOfWeek,
            month(d) AS TheMonth,
            date_format(d, 'MMMM') AS TheMonthName,
            quarter(d) AS TheQuarter,
            year(d) AS TheYear,
            make_date(year(d), month(d), 1) AS TheFirstOfMonth,
            make_date(year(d), 12, 31) AS TheLastOfYear,
            dayofyear(d) AS TheDayOfYear
        FROM d
    ),
    dim AS (
        SELECT
            TheDate,
            TheDay,
            CASE
                WHEN TheDay / 10 = 1 THEN 'th'
                ELSE CASE RIGHT(TheDay, 1)
                    WHEN '1' THEN 'st'
                    WHEN '2' THEN 'nd'
                    WHEN '3' THEN 'rd'
                    ELSE 'th'
                END
            END AS TheDaySuffix,
            TheDayName,
            TheDayOfWeek,
            ROW_NUMBER() OVER (PARTITION BY TheFirstOfMonth, TheDayOfWeek ORDER BY TheDate) AS TheDayOfWeekInMonth,
            TheDayOfYear,
            CASE
                WHEN TheDayOfWeek IN (1, 7) THEN 1
                ELSE 0
            END AS IsWeekend,
            TheWeek,
            TheISOWeek,
            date_sub(TheDate, TheDayOfWeek - 1) AS TheFirstOfWeek,
            date_add(date_sub(TheDate, TheDayOfWeek - 1), 6) AS TheLastOfWeek,
            DENSE_RANK() OVER (PARTITION BY TheYear, TheMonth ORDER BY TheWeek) AS TheWeekOfMonth,
            TheMonth,
            TheMonthName,
            TheFirstOfMonth,
            last_day(TheDate) AS TheLastOfMonth,
            add_months(TheFirstOfMonth, 1) AS TheFirstOfNextMonth,
            last_day(add_months(TheFirstOfMonth, 1)) AS TheLastOfNextMonth,
            TheQuarter,
            concat(TheYear, '-Q', TheQuarter) AS TheYearQuarter,
            MIN(TheDate) OVER (PARTITION BY TheYear, TheQuarter) AS TheFirstOfQuarter,
            MAX(TheDate) OVER (PARTITION BY TheYear, TheQuarter) AS TheLastOfQuarter,
            TheYear,
            TheYear - CASE
                WHEN TheMonth = 1 AND TheISOWeek > 51 THEN 1
                WHEN TheMonth = 12 AND TheISOWeek = 1 THEN -1
                ELSE 0
            END AS TheISOYear,
            make_date(TheYear, 1, 1) AS TheFirstOfYear,
            TheLastOfYear,
            CASE
                WHEN (TheYear % 400 = 0) OR (TheYear % 4 = 0 AND TheYear % 100 != 0) THEN 1
                ELSE 0
            END AS IsLeapYear,
            CASE
                WHEN weekofyear(TheLastOfYear) = 53 THEN 1
                ELSE 0
            END AS Has53Weeks,
            CASE
                WHEN weekofyear(TheLastOfYear) = 53 THEN 1
                ELSE 0
            END AS Has53ISOWeeks,
            concat(date_format(TheDate, 'MM'), TheYear) AS MMYYYY,
            date_format(TheDate, 'MM/dd/yyyy') AS Style101,
            date_format(TheDate, 'dd/MM/yyyy') AS Style103,
            date_format(TheDate, 'yyyyMMdd') AS Style112,
            date_format(TheDate, 'yyyy-MM-dd') AS Style120,
            CASE
                WHEN year(current_date()) = TheYear AND TheDate < add_months(current_date(), -12) THEN 1
                ELSE 0
            END AS YearToDate,
            CASE
                WHEN year(add_months(current_date(), -12)) = TheYear AND TheDate < add_months(current_date(), -12) THEN 1
                ELSE 0
            END AS PriorYearToDate,
            CASE
                WHEN year(add_months(current_date(), -12)) = TheYear THEN 1
                ELSE 0
            END AS PriorYear,
            CASE
                WHEN year(add_months(current_date(), -24)) = TheYear THEN 1
                ELSE 0
            END AS Prior2Years,
            CASE
                WHEN TheDate > add_months(current_date(), -12) AND TheDate <= current_date() THEN 1
                ELSE 0
            END AS Trailing12Months,
            CASE
                WHEN year(last_day(add_months(current_date(), -1))) = TheYear AND TheDate <= last_day(add_months(current_date(), -1)) THEN 1
                ELSE 0
            END AS PriorMonthYTD,
            CASE
                WHEN year(last_day(add_months(current_date(), -13))) = TheYear AND TheDate <= last_day(add_months(current_date(), -13)) THEN 1
                ELSE 0
            END AS PriorMonthPYTD,
            CASE
                WHEN TheDate > last_day(add_months(current_date(), -13)) AND TheDate <= last_day(add_months(current_date(), -1)) THEN 1
                ELSE 0
            END AS PriorMonthTTM,
            CASE
                WHEN TheDate = date_sub(make_date(year(current_date()), month(current_date()), 1), 1) THEN 1
                ELSE 0
            END AS InforceDateYTD,
            CASE
                WHEN TheDate = date_sub(make_date(year(current_date()) - 1, month(current_date()), 1), 1) THEN 1
                ELSE 0
            END AS InforceDatePYTD,
            CASE
                WHEN TheDate > last_day(add_months(current_date(), -25)) AND TheDate <= last_day(add_months(current_date(), -13)) THEN 1
                ELSE 0
            END AS PriorMonthPYTTM,
            CASE
                WHEN quarter(current_date()) = TheQuarter AND year(current_date()) = TheYear THEN 1
                ELSE 0
            END AS CurrentQuarter,
            CASE
                WHEN TheDate >= add_months(date_trunc('QUARTER', current_date()), -12) AND TheDate < date_trunc('QUARTER', current_date()) THEN 1
                ELSE 0
            END AS PriorYearQuarter,
            CASE
                WHEN TheDate >= add_months(date_trunc('QUARTER', current_date()), -12) AND TheDate < date_trunc('QUARTER', current_date()) THEN 1
                ELSE 0
            END AS PriorTrailing4Quarter
        FROM src
    )
    INSERT INTO {schema_name}.dim_date
    SELECT
        cast(date_format(TheDate, 'yyyyMMdd') AS INT) AS datekey,
        TheDate AS `date`,
        TheDay AS `day`,
        TheDaySuffix AS day_suffix,
        TheDayName AS day_name,
        TheDayOfWeek AS day_of_week,
        TheDayOfWeekInMonth AS day_of_week_in_month,
        TheDayOfYear AS day_of_year,
        IsWeekend AS is_weekend,
        TheWeek AS `week`,
        TheISOWeek AS iso_week,
        TheFirstOfWeek AS first_of_week,
        TheLastOfWeek AS last_of_week,
        TheWeekOfMonth AS week_of_month,
        TheMonth AS `month`,
        TheMonthName AS month_name,
        TheFirstOfMonth AS first_of_month,
        TheLastOfMonth AS last_of_month,
        TheFirstOfNextMonth AS first_of_next_month,
        TheLastOfNextMonth AS last_of_next_month,
        TheQuarter AS `quarter`,
        TheYearQuarter AS year_quarter,
        TheFirstOfQuarter AS first_of_quarter,
        TheLastOfQuarter AS last_of_quarter,
        TheYear AS `year`,
        TheISOYear AS iso_year,
        TheFirstOfYear AS first_of_year,
        TheLastOfYear AS last_of_year,
        IsLeapYear AS is_leap_year,
        Has53Weeks AS has_53_weeks,
        Has53ISOWeeks AS has_53_iso_weeks,
        MMYYYY AS mmyyyy,
        Style101 AS style101,
        Style103 AS style103,
        Style112 AS style112,
        Style120 AS style120,
        YearToDate AS year_to_date,
        PriorYearToDate AS prior_year_to_date,
        PriorYear AS prior_year,
        Prior2Years AS prior_2_years,
        Trailing12Months AS trailing_12_months,
        PriorMonthYTD AS prior_month_ytd,
        PriorMonthPYTD AS prior_month_pytd,
        PriorMonthTTM AS prior_month_ttm,
        InforceDateYTD AS inforce_date_ytd,
        InforceDatePYTD AS inforce_date_pytd,
        PriorMonthPYTTM AS prior_month_py_ttm,
        CurrentQuarter AS current_quarter,
        PriorYearQuarter AS prior_year_quarter,
        PriorTrailing4Quarter AS prior_trailing_4_quarter
    FROM dim
    ORDER BY TheDate
    """
    spark.sql(seed_query)
    logger.info(f"Table {schema_name}.dim_date seeded successfully")
except Exception as e:
    logger.error(f"Error creating or seeding {schema_name}.dim_date: {str(e)}")
    raise
++++++++++++++++++++++++++++++

INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LW0',		'Re-write', 'Re-write', Null);
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LX0',		'Re-issue', 'Re-issue', NULL);
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN0',		'NB - New Submission', 'NB - New Submission', NULL);
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR0',		'RN - Renewal', 'RN - Renewal', NULL);
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LZ0',		'Other - Exception', 'Other - Exception', NULL);

INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1',		'NB - Completed Submission',		'NB - Completed Submission',		'NB - New Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN2',		'NB - Open Submission',				'NB - Open Submission',				'NB - New Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN3',		'NB - Abandoned Before Prem Est',	'NB - Abandoned Before Prem Est',	'NB - New Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN4',		'NB - Other Exception',				'NB - Other Exception',				'NB - New Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1',		'NB - Quoted',						'NB - Quoted',						'NB - Completed Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_2',		'NB - Open Completed Submission',	'NB - Open Completed Submission',	'NB - Completed Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_3',		'NB - Guard Declined',				'NB - Guard Declined',				'NB - Completed Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_4',		'NB - Agency Withdrawal',			'NB - Agency Withdrawal',			'NB - Completed Submission');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_1',	'NB - Total Written',				'NB - Total Written',				'NB - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_2',	'NB - Open Quote',					'NB - Open Quote',					'NB - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_3',	'NB - Quote Not Taken',				'NB - Quote Not Taken',				'NB - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_3_1',	'NB - Decline - Book of Record',	'NB - Decline - Book of Record',	'NB - Guard Declined');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_3_2',	'NB - Decline - Class of Exposure',	'NB - Decline - Class of Exposure', 'NB - Guard Declined');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_3_3',	'NB - Decline - Questions',			'NB - Decline - Questions',			'NB - Guard Declined');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_3_4',	'NB - Decline - UW',				'NB - Decline - UW',					'NB - Guard Declined');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_4_1',	'NB - After Initial Prem Estimate Quote Not Taken',	'NB - After Initial Prem Estimate Quote Not Taken',	'NB - Agency Withdrawal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_4_2',	'NB - Not Responding to UW',		'NB - Not Responding to UW',		'NB - Agency Withdrawal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_4_3',	'NB - Agent Withdraw Before Quote',					'NB - Agent Withdraw Before Quote',					'NB - Agency Withdrawal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_1_1',	'NB - Issued',										'NB - Issued',										'NB - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_1_2',	'NB - Canceled Flat',								'NB - Canceled Flat',								'NB - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_1_3',	'NB - Canceled Short Rate',							'NB - Canceled Short Rate',							'NB - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LN1_1_1_4',	'NB - Canceled Pro-rata',							'NB - Canceled Pro-rata',							'NB - Total Written');


INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1',		'RN - Quoted',										'RN - Quoted',										'RN - Renewal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_2',		'RN - Guard Declined',								'RN - Guard Declined',								'RN - Renewal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_3',		'RN - Other Exception',								'RN - Other Exception',								'RN - Renewal');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_1',	'RN - Pending Proposal',							'RN - Pending Proposal',							'RN - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_2',	'RN - Pending Issuance',							'RN - Pending Issuance',							'RN - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_3',	'RN - Total Written',								'RN - Total Written',								'RN - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_4',	'RN - Open Quote',									'RN - Open Quote',									'RN - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_5',	'RN - Quote Not Taken',								'RN - Quote Not Taken',								'RN - Quoted');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_2_1',	'RN - Decline - Book of Record',					'RN - Decline - Book of Record',					'RN - Guard Declined');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_2_2',	'RN - Decline - UW',								'RN - Decline - UW',									'RN - Guard Declined');

INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_3_1',	'RN - Issued Paid',									'RN - Issued Paid',									'RN - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_3_1',	'RN - Issued Not Paid',								'RN - Issued Not Paid',								'RN - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_3_2',  'RN - Canceled Short Rate',							'RN - Canceled Short Rate',							'RN - Total Written');
INSERT INTO dim_policy_status(policy_status_level, policy_status_cd_bus_key, policy_status_desc,policy_status_parent_cd_bus_key ) VALUES ('LR2_1_3_3',	'RN - Canceled Pro-rata',							'RN - Canceled Pro-rata',							'RN - Total Written');
GO

update dim_policy_status a Set a.Policy_status_parent_key = b.policy_status_key
from dim_policy_status b on a.Policy_status_parent_cd_bus_key = b.policy_status_cd_bus_key
go
OPTION (MAXRECURSION 0);

====================

# Step 7: Create and seed dim_policy_status table
try:
    logger.info(f"Creating and seeding {schema_name}.dim_policy_status table")
    # Define the dim_policy_status table DDL
    dim_policy_status_ddl = f"""
    CREATE TABLE IF NOT EXISTS {schema_name}.dim_policy_status (
        policy_status_key INT,
        policy_status_level STRING,
        policy_status_cd_bus_key STRING,
        policy_status_desc STRING,
        policy_status_parent_cd_bus_key STRING,
        policy_status_parent_key INT,
        dl_eltid STRING,
        dl_runid STRING,
        dl_row_insert_agent STRING,
        dl_row_hash STRING,
        dl_is_current_flag TINYINT,
        dl_row_expiration_date DATE,
        dl_row_effective_date DATE,
        dl_row_update_timestamp TIMESTAMP,
        dl_row_insert_timestamp TIMESTAMP,
        dl_is_deleted_flag TINYINT
    ) USING DELTA COMMENT 'Dimension table for policy statuses, capturing hierarchy and descriptions';
    """
    spark.sql(dim_policy_status_ddl)
    logger.info(f"Table {schema_name}.dim_policy_status created successfully")

    # Seed the dim_policy_status table using UNION ALL
    seed_policy_status_query = f"""
    INSERT INTO {schema_name}.dim_policy_status (
        policy_status_key,
        policy_status_level,
        policy_status_cd_bus_key,
        policy_status_desc,
        policy_status_parent_cd_bus_key,
        dl_is_current_flag,
        dl_row_effective_date,
        dl_row_insert_timestamp,
        dl_is_deleted_flag
    )
    SELECT
        (monotonically_increasing_id() + 1) AS policy_status_key,
        policy_status_level,
        policy_status_cd_bus_key,
        policy_status_desc,
        policy_status_parent_cd_bus_key,
        1 AS dl_is_current_flag,
        current_date() AS dl_row_effective_date,
        current_timestamp() AS dl_row_insert_timestamp,
        0 AS dl_is_deleted_flag
    FROM (
        SELECT 'LW0' AS policy_status_level, 'Re-write' AS policy_status_cd_bus_key, 'Re-write' AS policy_status_desc, NULL AS policy_status_parent_cd_bus_key
        UNION ALL SELECT 'LX0', 'Re-issue', 'Re-issue', NULL
        UNION ALL SELECT 'LN0', 'NB - New Submission', 'NB - New Submission', NULL
        UNION ALL SELECT 'LR0', 'RN - Renewal', 'RN - Renewal', NULL
        UNION ALL SELECT 'LZ0', 'Other - Exception', 'Other - Exception', NULL
        UNION ALL SELECT 'LN1', 'NB - Completed Submission', 'NB - Completed Submission', 'NB - New Submission'
        UNION ALL SELECT 'LN2', 'NB - Open Submission', 'NB - Open Submission', 'NB - New Submission'
        UNION ALL SELECT 'LN3', 'NB - Abandoned Before Prem Est', 'NB - Abandoned Before Prem Est', 'NB - New Submission'
        UNION ALL SELECT 'LN4', 'NB - Other Exception', 'NB - Other Exception', 'NB - New Submission'
        UNION ALL SELECT 'LN1_1', 'NB - Quoted', 'NB - Quoted', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_2', 'NB - Open Completed Submission', 'NB - Open Completed Submission', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_3', 'NB - Guard Declined', 'NB - Guard Declined', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_4', 'NB - Agency Withdrawal', 'NB - Agency Withdrawal', 'NB - Completed Submission'
        UNION ALL SELECT 'LN1_1_1', 'NB - Total Written', 'NB - Total Written', 'NB - Quoted'
        UNION ALL SELECT 'LN1_1_2', 'NB - Open Quote', 'NB - Open Quote', 'NB - Quoted'
        UNION ALL SELECT 'LN1_1_3', 'NB - Quote Not Taken', 'NB - Quote Not Taken', 'NB - Quoted'
        UNION ALL SELECT 'LN1_3_1', 'NB - Decline - Book of Record', 'NB - Decline - Book of Record', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_2', 'NB - Decline - Class of Exposure', 'NB - Decline - Class of Exposure', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_3', 'NB - Decline - Questions', 'NB - Decline - Questions', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_3_4', 'NB - Decline - UW', 'NB - Decline - UW', 'NB - Guard Declined'
        UNION ALL SELECT 'LN1_4_1', 'NB - After Initial Prem Estimate Quote Not Taken', 'NB - After Initial Prem Estimate Quote Not Taken', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_4_2', 'NB - Not Responding to UW', 'NB - Not Responding to UW', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_4_3', 'NB - Agent Withdraw Before Quote', 'NB - Agent Withdraw Before Quote', 'NB - Agency Withdrawal'
        UNION ALL SELECT 'LN1_1_1_1', 'NB - Issued', 'NB - Issued', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_2', 'NB - Canceled Flat', 'NB - Canceled Flat', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_3', 'NB - Canceled Short Rate', 'NB - Canceled Short Rate', 'NB - Total Written'
        UNION ALL SELECT 'LN1_1_1_4', 'NB - Canceled Pro-rata', 'NB - Canceled Pro-rata', 'NB - Total Written'
        UNION ALL SELECT 'LR2_1', 'RN - Quoted', 'RN - Quoted', 'RN - Renewal'
        UNION ALL SELECT 'LR2_2', 'RN - Guard Declined', 'RN - Guard Declined', 'RN - Renewal'
        UNION ALL SELECT 'LR2_3', 'RN - Other Exception', 'RN - Other Exception', 'RN - Renewal'
        UNION ALL SELECT 'LR2_1_1', 'RN - Pending Proposal', 'RN - Pending Proposal', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_2', 'RN - Pending Issuance', 'RN - Pending Issuance', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_3', 'RN - Total Written', 'RN - Total Written', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_4', 'RN - Open Quote', 'RN - Open Quote', 'RN - Quoted'
        UNION ALL SELECT 'LR2_1_5', 'RN - Quote Not Taken', 'RN - Quote Not Taken', 'RN - Quoted'
        UNION ALL SELECT 'LR2_2_1', 'RN - Decline - Book of Record', 'RN - Decline - Book of Record', 'RN - Guard Declined'
        UNION ALL SELECT 'LR2_2_2', 'RN - Decline - UW', 'RN - Decline - UW', 'RN - Guard Declined'
        UNION ALL SELECT 'LR2_1_3_1', 'RN - Issued Paid', 'RN - Issued Paid', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_2', 'RN - Issued Not Paid', 'RN - Issued Not Paid', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_3', 'RN - Canceled Short Rate', 'RN - Canceled Short Rate', 'RN - Total Written'
        UNION ALL SELECT 'LR2_1_3_4', 'RN - Canceled Pro-rata', 'RN - Canceled Pro-rata', 'RN - Total Written'
    ) AS data
    """
    spark.sql(seed_policy_status_query)
    logger.info(f"Table {schema_name}.dim_policy_status seeded successfully")

    # Update policy_status_parent_key
    update_parent_key_query = f"""
    MERGE INTO {schema_name}.dim_policy_status AS a
    USING {schema_name}.dim_policy_status AS b
    ON a.policy_status_parent_cd_bus_key = b.policy_status_cd_bus_key
    WHEN MATCHED THEN
        UPDATE SET a.policy_status_parent_key = b.policy_status_key
    """
    spark.sql(update_parent_key_query)
    logger.info(f"Updated policy_status_parent_key in {schema_name}.dim_policy_status")
except Exception as e:
    logger.error(f"Error creating, seeding, or updating {schema_name}.dim_policy_status: {str(e)}")
    raise
