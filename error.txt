private_key_str = get_secret_notebookutils(private_key_secret, key_vault_name)
passphrase = get_secret_notebookutils(passphrase_secret, key_vault_name)

privkey, _ = pgpy.PGPKey.from_blob(private_key_str)
try:
    with privkey.unlock(passphrase):
        print("Private key unlocked successfully")
except pgpy.errors.PGPError as e:
    print(f"Passphrase error: {str(e)}")
Private key unlocked successfully

# check if file was encrypted with the corresponding piublic key
pgp = PGP(
    key_vault_name=key_vault_name,
    public_key_secret=public_key_secret,
    private_key_secret=private_key_secret,
    passphrase_secret=passphrase_secret
)
input_file = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/BOP PD & OS.xlsx"
output_path = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/encrypted"
pgp.encrypt_file(input_file, output_path)  # Re-encrypt to ensure key match

pgp = PGP(
    key_vault_name=key_vault_name,
    public_key_secret=public_key_secret,
    private_key_secret=private_key_secret,
    passphrase_secret=passphrase_secret
)
input_file = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/encrypted/BOP PD & OS.xlsx.pgp"
output_path = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/decrypted"
pgp.decrypt_file(input_file, output_path)

---------------------------------------------------------------------------
PGPError                                  Traceback (most recent call last)
File ~/cluster-env/clonedenv/lib/python3.11/site-packages/spark_engine/common/pgp.py:134, in PGP.decrypt_file(self, input_file, output_path)
    131     enc_message = pgpy.PGPMessage.from_blob(rb_file.read())
    133 decrypted_message = (
--> 134     self.privkey.unlock(self.passphrase).__enter__().decrypt(enc_message).message
    135     if self.privkey.is_protected
    136     else self.privkey.decrypt(enc_message).message
    137 )
    139 file_name = os.path.basename(input_file).removesuffix(".pgp")

File ~/cluster-env/clonedenv/lib/python3.11/site-packages/pgpy/decorators.py:128, in KeyAction.__call__.<locals>._action(key, *args, **kwargs)
    127 with self.usage(key, kwargs.get('user', None)) as _key:
--> 128     self.check_attributes(key)
    130     # do the thing

File ~/cluster-env/clonedenv/lib/python3.11/site-packages/pgpy/decorators.py:114, in KeyAction.check_attributes(self, key)
    113 if getattr(key, attr) != expected:
--> 114     raise PGPError("Expected: {attr:s} == {eval:s}. Got: {got:s}"
    115                    "".format(attr=attr, eval=str(expected), got=str(getattr(key, attr))))

PGPError: Expected: is_unlocked == True. Got: False

During handling of the above exception, another exception occurred:

OSError                                   Traceback (most recent call last)
Cell In[94], line 10
      8 input_file = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/encrypted/BOP PD & OS.xlsx.pgp"
      9 output_path = "abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/f1da4f29-81af-4030-9190-889e5fa725bf/Files/user_data/pdos_webreport/decrypted"
---> 10 pgp.decrypt_file(input_file, output_path)

File ~/cluster-env/clonedenv/lib/python3.11/site-packages/spark_engine/common/pgp.py:148, in PGP.decrypt_file(self, input_file, output_path)
    146     return self
    147 except Exception as e:
--> 148     raise IOError(f"Failed to decrypt file: {str(e)}")

OSError: Failed to decrypt file: Expected: is_unlocked == True. Got: False


# Generate key with minimal User ID
key = pgpy.PGPKey.new(pgpy.constants.PubKeyAlgorithm.RSAEncryptOrSign, 2048)
uid = pgpy.PGPUID.new("Anonymous")  # Minimal User ID
key.add_uid(
    uid,
    usage={pgpy.constants.KeyFlags.EncryptCommunications, pgpy.constants.KeyFlags.EncryptStorage},
    hashes=[pgpy.constants.HashAlgorithm.SHA256],
    ciphers=[pgpy.constants.SymmetricKeyAlgorithm.AES256]
)
passphrase = "my-passphrase"
key.protect(passphrase, pgpy.constants.SymmetricKeyAlgorithm.AES256, pgpy.constants.HashAlgorithm.SHA256)
public_key = str(key.pubkey)
private_key = str(key)

ValueError: Failed to load PGP keys: encoding without a string argument
# Generate a new key pair
key = pgpy.PGPKey.new(pgpy.constants.PubKeyAlgorithm.RSAEncryptOrSign, 2048)

# Extract the public and private keys
MOCK_PUBLIC_KEY = key.pubkey
MOCK_PRIVATE_KEY = key

# Save the keys to files (optional)
with open('mock_public_key.asc', 'w') as pub_file:
    pub_file.write(str(MOCK_PUBLIC_KEY))

with open('mock_private_key.asc', 'w') as priv_file:
    priv_file.write(str(MOCK_PRIVATE_KEY))

# Initialize with secrets from key vault
pgp = PGP(
    key_vault_name="",
    public_key_secret="",
    private_key_secret="",
    public_key=MOCK_PUBLIC_KEY.__str__(),
    private_key=MOCK_PRIVATE_KEY.__str__()
)

# Encrypt a file
pgp.encrypt_file(
    input_file="abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/7c6d771a-3b6f-4042-8a89-1a885973a93c/Files/templates/emails/deduplication_msg.json",
    output_path="abfss://ab08da5e-0f71-423b-a811-bd0af21f182b@onelake.dfs.fabric.microsoft.com/7c6d771a-3b6f-4042-8a89-1a885973a93c/Files/templates/emails/output"
)


# Write to a temporary local file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            temp_path = temp_file.name
            temp_file.write(file_content)

Here’s a breakdown of the issue and how to resolve it:
Current Behavior:
When using https://graph.microsoft.com/.default (Microsoft Graph API scope), the token’s payload lacks roles, indicating no application permissions are assigned for Microsoft Graph.

When using https://guardinsurancegroup.sharepoint.com/.default (SharePoint API scope), the token includes roles (e.g., Sites.Read.All), indicating the SPN has application permissions for SharePoint APIs.

The 401 Unauthorized error occurs because the Graph API request to retrieve the site ID (/sites/guardinsurancegroup.sharepoint.com:/sites/DnAFluidityPlatform-ReferenceDataProducts) requires Microsoft Graph permissions (Sites.Read.All), which are missing.

Root Cause:
The SPN is configured with application permissions for the SharePoint API (e.g., Sites.Read.All) but lacks equivalent permissions for the Microsoft Graph API.

The https://graph.microsoft.com/.default scope requests all application permissions assigned to the SPN for Microsoft Graph, but since none are configured, the token has no roles, resulting in a 401 error.

Solution:
Update the SPN’s Azure AD configuration to include Microsoft Graph application permissions (Sites.Read.All, Files.Read.All).

Ensure admin consent is granted for these permissions.

Re-run the notebook script to obtain a token with the correct roles and validate the file download.


Site ID: guardinsurancegroup.sharepoint.com,0578f0c1-7ef4-4a29-ad2a-c53cfeadc111,4e425572-d366-47c1-a74c-2f6d28535311
Graph HTTP error: 404 Client Error: Not Found for url: https://graph.microsoft.com/v1.0/sites/guardinsurancegroup.sharepoint.com,69b58035-2e49-4510-9f18-776f0c4f418c/drive/root:/Shared%20Documents/Source%20Files/Ref_ASLOB_v1.xlsx:/content, Response: {"error":{"code":"itemNotFound","message":"The resource could not be found."}}



